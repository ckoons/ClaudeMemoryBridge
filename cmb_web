#!/usr/bin/env python3
# Use the virtual environment python
import os
import sys

# Try to use the virtual environment if it exists
venv_python = os.path.join(os.path.dirname(os.path.abspath(__file__)), "venv/bin/python")
if os.path.exists(venv_python):
    os.execl(venv_python, venv_python, *sys.argv)
"""
Start the Claude Memory Bridge Web UI.
"""

import os
import sys
import argparse
import traceback

# Add debug logging to a file
log_file = os.path.join(os.path.dirname(os.path.abspath(__file__)), "cmb_web_debug.log")
with open(log_file, "a") as f:
    f.write("\n--- Starting Web UI ---\n")
    f.write(f"Python executable: {sys.executable}\n")
    f.write(f"Python version: {sys.version}\n")
    f.write(f"Current directory: {os.getcwd()}\n")
    f.write(f"Args: {sys.argv}\n")

try:
    # Add project root to path
    script_dir = os.path.dirname(os.path.abspath(__file__))
    sys.path.insert(0, script_dir)
    
    # Try import and report any errors
    with open(log_file, "a") as f:
        f.write("Importing app.main...\n")
    
    from cmb.web.app import main
    
    with open(log_file, "a") as f:
        f.write("Import successful\n")
    
    if __name__ == "__main__":
        parser = argparse.ArgumentParser(description="Start the Claude Memory Bridge Web UI")
        parser.add_argument("--host", default="127.0.0.1", help="Host to bind to (default: 127.0.0.1)")
        parser.add_argument("--port", type=int, default=8002, help="Port to listen on (default: 8002)")
        parser.add_argument("--debug", action="store_true", help="Run in debug mode")
        
        args = parser.parse_args()
        
        # Set environment variables for the web app
        os.environ["CMB_WEB_HOST"] = args.host
        os.environ["CMB_WEB_PORT"] = str(args.port)
        os.environ["CMB_WEB_DEBUG"] = "true" if args.debug else "false"
        
        with open(log_file, "a") as f:
            f.write(f"Starting web UI on {args.host}:{args.port} (debug: {args.debug})\n")
        
        # Start the web UI
        main()
except Exception as e:
    with open(log_file, "a") as f:
        f.write(f"ERROR: {str(e)}\n")
        f.write(traceback.format_exc())
        f.write("\n")